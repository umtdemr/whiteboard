// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: permission.sql

package db

import (
	"context"
)

const addForUserWithCode = `-- name: AddForUserWithCode :many
INSERT INTO "user_permissions" (user_id, permission_id)
SELECT $1, permissions.id FROM permissions WHERE permissions.code = ANY($2::text[])
RETURNING user_id, permission_id
`

type AddForUserWithCodeParams struct {
	UserID int64    `json:"user_id"`
	Codes  []string `json:"codes"`
}

func (q *Queries) AddForUserWithCode(ctx context.Context, arg AddForUserWithCodeParams) ([]UserPermission, error) {
	rows, err := q.db.Query(ctx, addForUserWithCode, arg.UserID, arg.Codes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserPermission{}
	for rows.Next() {
		var i UserPermission
		if err := rows.Scan(&i.UserID, &i.PermissionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const addPermissionForUser = `-- name: AddPermissionForUser :one
INSERT INTO "user_permissions" (user_id, permission_id)
VALUES ($1, $2)
RETURNING user_id, permission_id
`

type AddPermissionForUserParams struct {
	UserID       int64 `json:"user_id"`
	PermissionID int64 `json:"permission_id"`
}

func (q *Queries) AddPermissionForUser(ctx context.Context, arg AddPermissionForUserParams) (UserPermission, error) {
	row := q.db.QueryRow(ctx, addPermissionForUser, arg.UserID, arg.PermissionID)
	var i UserPermission
	err := row.Scan(&i.UserID, &i.PermissionID)
	return i, err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO "permissions" (code)
VALUES ($1)
RETURNING id, code
`

func (q *Queries) CreatePermission(ctx context.Context, code string) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission, code)
	var i Permission
	err := row.Scan(&i.ID, &i.Code)
	return i, err
}

const getAllPermissionsForUser = `-- name: GetAllPermissionsForUser :many
SELECT permissions.code
FROM permissions
INNER JOIN user_permissions ON user_permissions.permission_id = permissions.id
INNER JOIN users ON user_permissions.user_id = users.id
WHERE users.id = $1
`

func (q *Queries) GetAllPermissionsForUser(ctx context.Context, id int32) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllPermissionsForUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
