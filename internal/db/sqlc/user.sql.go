// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "users"(
    email,
    password_hash,
    full_name,
    auth_provider,
    is_verified     
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, full_name, email, password_hash, is_verified, auth_provider, auth_provider_id, created_at, version
`

type CreateUserParams struct {
	Email        string      `json:"email"`
	PasswordHash []byte      `json:"password_hash"`
	FullName     string      `json:"full_name"`
	AuthProvider string      `json:"auth_provider"`
	IsVerified   pgtype.Bool `json:"is_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.FullName,
		arg.AuthProvider,
		arg.IsVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.IsVerified,
		&i.AuthProvider,
		&i.AuthProviderID,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const getForToken = `-- name: GetForToken :one
SELECT
    id, full_name, email, password_hash, is_verified, auth_provider, auth_provider_id, created_at, version, hash, user_id, expiry, scope
FROM users
INNER JOIN tokens
ON users.id = tokens.user_id
WHERE tokens.hash = $1
AND tokens.scope = $2
AND tokens.expiry > $3
`

type GetForTokenParams struct {
	Hash   []byte             `json:"hash"`
	Scope  string             `json:"scope"`
	Expiry pgtype.Timestamptz `json:"expiry"`
}

type GetForTokenRow struct {
	ID             int32              `json:"id"`
	FullName       string             `json:"full_name"`
	Email          string             `json:"email"`
	PasswordHash   []byte             `json:"password_hash"`
	IsVerified     pgtype.Bool        `json:"is_verified"`
	AuthProvider   string             `json:"auth_provider"`
	AuthProviderID pgtype.Text        `json:"auth_provider_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	Version        int32              `json:"version"`
	Hash           []byte             `json:"hash"`
	UserID         int64              `json:"user_id"`
	Expiry         pgtype.Timestamptz `json:"expiry"`
	Scope          string             `json:"scope"`
}

func (q *Queries) GetForToken(ctx context.Context, arg GetForTokenParams) (GetForTokenRow, error) {
	row := q.db.QueryRow(ctx, getForToken, arg.Hash, arg.Scope, arg.Expiry)
	var i GetForTokenRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.IsVerified,
		&i.AuthProvider,
		&i.AuthProviderID,
		&i.CreatedAt,
		&i.Version,
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, email, password_hash, is_verified, auth_provider, auth_provider_id, created_at, version
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.IsVerified,
		&i.AuthProvider,
		&i.AuthProviderID,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "users"
SET
    full_name = COALESCE($1, full_name),
    email = COALESCE($2, email),
    password_hash = COALESCE($3, password_hash),
    is_verified = COALESCE($4, is_verified),
    version = version + 1
WHERE id = $5 AND version = $6
RETURNING id, full_name, email, password_hash, is_verified, auth_provider, auth_provider_id, created_at, version
`

type UpdateUserParams struct {
	FullName     pgtype.Text `json:"full_name"`
	Email        pgtype.Text `json:"email"`
	PasswordHash []byte      `json:"password_hash"`
	IsVerified   pgtype.Bool `json:"is_verified"`
	ID           int32       `json:"id"`
	Version      int32       `json:"version"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FullName,
		arg.Email,
		arg.PasswordHash,
		arg.IsVerified,
		arg.ID,
		arg.Version,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.IsVerified,
		&i.AuthProvider,
		&i.AuthProviderID,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}
