// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/umtdemr/wb-backend/internal/data (interfaces: UserModel)

// Package mockdata is a generated GoMock package.
package mockdata

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data "github.com/umtdemr/wb-backend/internal/data"
	db "github.com/umtdemr/wb-backend/internal/db/sqlc"
)

// MockUserModel is a mock of UserModel interface.
type MockUserModel struct {
	ctrl     *gomock.Controller
	recorder *MockUserModelMockRecorder
}

// MockUserModelMockRecorder is the mock recorder for MockUserModel.
type MockUserModelMockRecorder struct {
	mock *MockUserModel
}

// NewMockUserModel creates a new mock instance.
func NewMockUserModel(ctrl *gomock.Controller) *MockUserModel {
	mock := &MockUserModel{ctrl: ctrl}
	mock.recorder = &MockUserModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserModel) EXPECT() *MockUserModelMockRecorder {
	return m.recorder
}

// ActivateUser mocks base method.
func (m *MockUserModel) ActivateUser(arg0 string) (*data.ActivateUserResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUser", arg0)
	ret0, _ := ret[0].(*data.ActivateUserResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateUser indicates an expected call of ActivateUser.
func (mr *MockUserModelMockRecorder) ActivateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUser", reflect.TypeOf((*MockUserModel)(nil).ActivateUser), arg0)
}

// GetByEmail mocks base method.
func (m *MockUserModel) GetByEmail(arg0 string) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserModelMockRecorder) GetByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserModel)(nil).GetByEmail), arg0)
}

// GetForToken mocks base method.
func (m *MockUserModel) GetForToken(arg0, arg1 string) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForToken", arg0, arg1)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForToken indicates an expected call of GetForToken.
func (mr *MockUserModelMockRecorder) GetForToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForToken", reflect.TypeOf((*MockUserModel)(nil).GetForToken), arg0, arg1)
}

// Insert mocks base method.
func (m *MockUserModel) Insert(arg0 *data.User) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUserModelMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserModel)(nil).Insert), arg0)
}

// Register mocks base method.
func (m *MockUserModel) Register(arg0 *data.User) (*data.RegisterUserResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(*data.RegisterUserResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserModelMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserModel)(nil).Register), arg0)
}

// Update mocks base method.
func (m *MockUserModel) Update(arg0 db.UpdateUserParams) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserModelMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserModel)(nil).Update), arg0)
}
