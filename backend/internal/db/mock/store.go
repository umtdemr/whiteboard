// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/umtdemr/wb-backend/internal/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/umtdemr/wb-backend/internal/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ActivateUserTx mocks base method.
func (m *MockStore) ActivateUserTx(arg0 context.Context, arg1 string) (db.ActivateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.ActivateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateUserTx indicates an expected call of ActivateUserTx.
func (mr *MockStoreMockRecorder) ActivateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUserTx", reflect.TypeOf((*MockStore)(nil).ActivateUserTx), arg0, arg1)
}

// AddForUserWithCode mocks base method.
func (m *MockStore) AddForUserWithCode(arg0 context.Context, arg1 db.AddForUserWithCodeParams) ([]db.UserPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddForUserWithCode", arg0, arg1)
	ret0, _ := ret[0].([]db.UserPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddForUserWithCode indicates an expected call of AddForUserWithCode.
func (mr *MockStoreMockRecorder) AddForUserWithCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddForUserWithCode", reflect.TypeOf((*MockStore)(nil).AddForUserWithCode), arg0, arg1)
}

// AddPermissionForUser mocks base method.
func (m *MockStore) AddPermissionForUser(arg0 context.Context, arg1 db.AddPermissionForUserParams) (db.UserPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermissionForUser", arg0, arg1)
	ret0, _ := ret[0].(db.UserPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPermissionForUser indicates an expected call of AddPermissionForUser.
func (mr *MockStoreMockRecorder) AddPermissionForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionForUser", reflect.TypeOf((*MockStore)(nil).AddPermissionForUser), arg0, arg1)
}

// AddToBoardUsers mocks base method.
func (m *MockStore) AddToBoardUsers(arg0 context.Context, arg1 db.AddToBoardUsersParams) (db.BoardUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBoardUsers", arg0, arg1)
	ret0, _ := ret[0].(db.BoardUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToBoardUsers indicates an expected call of AddToBoardUsers.
func (mr *MockStoreMockRecorder) AddToBoardUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBoardUsers", reflect.TypeOf((*MockStore)(nil).AddToBoardUsers), arg0, arg1)
}

// CreateBoard mocks base method.
func (m *MockStore) CreateBoard(arg0 context.Context, arg1 db.CreateBoardParams) (db.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoard", arg0, arg1)
	ret0, _ := ret[0].(db.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoard indicates an expected call of CreateBoard.
func (mr *MockStoreMockRecorder) CreateBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoard", reflect.TypeOf((*MockStore)(nil).CreateBoard), arg0, arg1)
}

// CreateBoardPage mocks base method.
func (m *MockStore) CreateBoardPage(arg0 context.Context, arg1 db.CreateBoardPageParams) (db.BoardPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoardPage", arg0, arg1)
	ret0, _ := ret[0].(db.BoardPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoardPage indicates an expected call of CreateBoardPage.
func (mr *MockStoreMockRecorder) CreateBoardPage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoardPage", reflect.TypeOf((*MockStore)(nil).CreateBoardPage), arg0, arg1)
}

// CreateBoardTx mocks base method.
func (m *MockStore) CreateBoardTx(arg0 context.Context, arg1 db.CreateBoardTxParams) (db.CreateBoardTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoardTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateBoardTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoardTx indicates an expected call of CreateBoardTx.
func (mr *MockStoreMockRecorder) CreateBoardTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoardTx", reflect.TypeOf((*MockStore)(nil).CreateBoardTx), arg0, arg1)
}

// CreatePermission mocks base method.
func (m *MockStore) CreatePermission(arg0 context.Context, arg1 string) (db.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(db.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockStoreMockRecorder) CreatePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockStore)(nil).CreatePermission), arg0, arg1)
}

// CreateToken mocks base method.
func (m *MockStore) CreateToken(arg0 context.Context, arg1 db.CreateTokenParams) (db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0, arg1)
	ret0, _ := ret[0].(db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockStoreMockRecorder) CreateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockStore)(nil).CreateToken), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteTokensForUser mocks base method.
func (m *MockStore) DeleteTokensForUser(arg0 context.Context, arg1 db.DeleteTokensForUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTokensForUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTokensForUser indicates an expected call of DeleteTokensForUser.
func (mr *MockStoreMockRecorder) DeleteTokensForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTokensForUser", reflect.TypeOf((*MockStore)(nil).DeleteTokensForUser), arg0, arg1)
}

// GetAllBoardsForUser mocks base method.
func (m *MockStore) GetAllBoardsForUser(arg0 context.Context, arg1 int64) ([]db.GetAllBoardsForUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBoardsForUser", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAllBoardsForUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBoardsForUser indicates an expected call of GetAllBoardsForUser.
func (mr *MockStoreMockRecorder) GetAllBoardsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBoardsForUser", reflect.TypeOf((*MockStore)(nil).GetAllBoardsForUser), arg0, arg1)
}

// GetAllPermissionsForUser mocks base method.
func (m *MockStore) GetAllPermissionsForUser(arg0 context.Context, arg1 int32) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPermissionsForUser", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPermissionsForUser indicates an expected call of GetAllPermissionsForUser.
func (mr *MockStoreMockRecorder) GetAllPermissionsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPermissionsForUser", reflect.TypeOf((*MockStore)(nil).GetAllPermissionsForUser), arg0, arg1)
}

// GetBoardById mocks base method.
func (m *MockStore) GetBoardById(arg0 context.Context, arg1 int32) (db.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardById", arg0, arg1)
	ret0, _ := ret[0].(db.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardById indicates an expected call of GetBoardById.
func (mr *MockStoreMockRecorder) GetBoardById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardById", reflect.TypeOf((*MockStore)(nil).GetBoardById), arg0, arg1)
}

// GetBoardBySlugId mocks base method.
func (m *MockStore) GetBoardBySlugId(arg0 context.Context, arg1 db.GetBoardBySlugIdParams) (db.GetBoardBySlugIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardBySlugId", arg0, arg1)
	ret0, _ := ret[0].(db.GetBoardBySlugIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardBySlugId indicates an expected call of GetBoardBySlugId.
func (mr *MockStoreMockRecorder) GetBoardBySlugId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardBySlugId", reflect.TypeOf((*MockStore)(nil).GetBoardBySlugId), arg0, arg1)
}

// GetBoardPageByBoardId mocks base method.
func (m *MockStore) GetBoardPageByBoardId(arg0 context.Context, arg1 int64) ([]db.GetBoardPageByBoardIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardPageByBoardId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetBoardPageByBoardIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardPageByBoardId indicates an expected call of GetBoardPageByBoardId.
func (mr *MockStoreMockRecorder) GetBoardPageByBoardId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardPageByBoardId", reflect.TypeOf((*MockStore)(nil).GetBoardPageByBoardId), arg0, arg1)
}

// GetBoardUsers mocks base method.
func (m *MockStore) GetBoardUsers(arg0 context.Context, arg1 int64) ([]db.GetBoardUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.GetBoardUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardUsers indicates an expected call of GetBoardUsers.
func (mr *MockStoreMockRecorder) GetBoardUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardUsers", reflect.TypeOf((*MockStore)(nil).GetBoardUsers), arg0, arg1)
}

// GetForToken mocks base method.
func (m *MockStore) GetForToken(arg0 context.Context, arg1 db.GetForTokenParams) (db.GetForTokenRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForToken", arg0, arg1)
	ret0, _ := ret[0].(db.GetForTokenRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForToken indicates an expected call of GetForToken.
func (mr *MockStoreMockRecorder) GetForToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForToken", reflect.TypeOf((*MockStore)(nil).GetForToken), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// RegisterUserTx mocks base method.
func (m *MockStore) RegisterUserTx(arg0 context.Context, arg1 db.RegisterUserTxParams) (db.RegisterUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.RegisterUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUserTx indicates an expected call of RegisterUserTx.
func (mr *MockStoreMockRecorder) RegisterUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUserTx", reflect.TypeOf((*MockStore)(nil).RegisterUserTx), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
