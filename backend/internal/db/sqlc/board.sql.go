// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: board.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addToBoardUsers = `-- name: AddToBoardUsers :one
INSERT INTO "board_users" (board_id, user_id, role)
VALUES ($1, $2, $3)
RETURNING board_id, user_id, created_at, role
`

type AddToBoardUsersParams struct {
	BoardID int64  `json:"board_id"`
	UserID  int64  `json:"user_id"`
	Role    string `json:"role"`
}

func (q *Queries) AddToBoardUsers(ctx context.Context, arg AddToBoardUsersParams) (BoardUser, error) {
	row := q.db.QueryRow(ctx, addToBoardUsers, arg.BoardID, arg.UserID, arg.Role)
	var i BoardUser
	err := row.Scan(
		&i.BoardID,
		&i.UserID,
		&i.CreatedAt,
		&i.Role,
	)
	return i, err
}

const createBoard = `-- name: CreateBoard :one
INSERT INTO "boards" (
    slug_id,
    name,
    owner_id
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, slug_id, name, owner_id, created_at, is_deleted
`

type CreateBoardParams struct {
	SlugID  string `json:"slug_id"`
	Name    string `json:"name"`
	OwnerID int64  `json:"owner_id"`
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) (Board, error) {
	row := q.db.QueryRow(ctx, createBoard, arg.SlugID, arg.Name, arg.OwnerID)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.SlugID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const createBoardPage = `-- name: CreateBoardPage :one
INSERT INTO "board_pages" (
    board_id,
    name
) VALUES (
     $1,
     $2
) RETURNING id, board_id, name, created_at, is_deleted
`

type CreateBoardPageParams struct {
	BoardID int64  `json:"board_id"`
	Name    string `json:"name"`
}

func (q *Queries) CreateBoardPage(ctx context.Context, arg CreateBoardPageParams) (BoardPage, error) {
	row := q.db.QueryRow(ctx, createBoardPage, arg.BoardID, arg.Name)
	var i BoardPage
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.Name,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getAllBoardsForUser = `-- name: GetAllBoardsForUser :many
SELECT b.id, b.slug_id, b.owner_id, b.created_at, b.is_deleted, b.name,
       CASE
           WHEN b.owner_id = $1 THEN TRUE
           ELSE FALSE
           END AS is_owner
FROM boards b
 JOIN board_users bu ON bu.board_id = b.id AND bu.user_id = $1
WHERE b.is_deleted = FALSE
ORDER BY b.created_at DESC
`

type GetAllBoardsForUserRow struct {
	ID        int32              `json:"id"`
	SlugID    string             `json:"slug_id"`
	OwnerID   int64              `json:"owner_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	IsDeleted bool               `json:"is_deleted"`
	Name      string             `json:"name"`
	IsOwner   bool               `json:"is_owner"`
}

func (q *Queries) GetAllBoardsForUser(ctx context.Context, ownerID int64) ([]GetAllBoardsForUserRow, error) {
	rows, err := q.db.Query(ctx, getAllBoardsForUser, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllBoardsForUserRow{}
	for rows.Next() {
		var i GetAllBoardsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.SlugID,
			&i.OwnerID,
			&i.CreatedAt,
			&i.IsDeleted,
			&i.Name,
			&i.IsOwner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBoardById = `-- name: GetBoardById :one
SELECT id, slug_id, name, owner_id, created_at, is_deleted
FROM boards
WHERE id = $1
`

func (q *Queries) GetBoardById(ctx context.Context, id int32) (Board, error) {
	row := q.db.QueryRow(ctx, getBoardById, id)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.SlugID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getBoardBySlugId = `-- name: GetBoardBySlugId :one
SELECT b.id, b.slug_id, b.owner_id, b.created_at, b.is_deleted, b.name,
       CASE
           WHEN b.owner_id = $1 THEN TRUE
           ELSE FALSE
           END AS is_owner
FROM boards b
JOIN board_users bu ON bu.board_id = b.id AND bu.user_id = $1
WHERE b.is_deleted = FALSE and b.slug_id = $2
`

type GetBoardBySlugIdParams struct {
	OwnerID int64  `json:"owner_id"`
	SlugID  string `json:"slug_id"`
}

type GetBoardBySlugIdRow struct {
	ID        int32              `json:"id"`
	SlugID    string             `json:"slug_id"`
	OwnerID   int64              `json:"owner_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	IsDeleted bool               `json:"is_deleted"`
	Name      string             `json:"name"`
	IsOwner   bool               `json:"is_owner"`
}

func (q *Queries) GetBoardBySlugId(ctx context.Context, arg GetBoardBySlugIdParams) (GetBoardBySlugIdRow, error) {
	row := q.db.QueryRow(ctx, getBoardBySlugId, arg.OwnerID, arg.SlugID)
	var i GetBoardBySlugIdRow
	err := row.Scan(
		&i.ID,
		&i.SlugID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.IsDeleted,
		&i.Name,
		&i.IsOwner,
	)
	return i, err
}

const getBoardPageByBoardId = `-- name: GetBoardPageByBoardId :many
SELECT name, id, created_at
FROM board_pages
WHERE board_id = $1 and is_deleted = false
`

type GetBoardPageByBoardIdRow struct {
	Name      string             `json:"name"`
	ID        int32              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetBoardPageByBoardId(ctx context.Context, boardID int64) ([]GetBoardPageByBoardIdRow, error) {
	rows, err := q.db.Query(ctx, getBoardPageByBoardId, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBoardPageByBoardIdRow{}
	for rows.Next() {
		var i GetBoardPageByBoardIdRow
		if err := rows.Scan(&i.Name, &i.ID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBoardUsers = `-- name: GetBoardUsers :many
SELECT u.id, u.full_name, u.email, bu.role FROM users u
LEFT JOIN board_users bu ON bu.user_id = u.id
WHERE bu.board_id = $1
`

type GetBoardUsersRow struct {
	ID       int32       `json:"id"`
	FullName string      `json:"full_name"`
	Email    string      `json:"email"`
	Role     pgtype.Text `json:"role"`
}

func (q *Queries) GetBoardUsers(ctx context.Context, boardID int64) ([]GetBoardUsersRow, error) {
	rows, err := q.db.Query(ctx, getBoardUsers, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBoardUsersRow{}
	for rows.Next() {
		var i GetBoardUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
